{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editor","preview","handleChange","bind","assertThisInitialized","event","setState","target","value","marked","renderer","Renderer","link","href","title","text","prototype","replace","setOptions","sanitize","tables","breaks","gfm","script","document","createElement","src","async","body","appendChild","react_default","a","className","Row","style","marginLeft","marginRight","paddingTop","Col","m","Card","height","CardHeader","CardBody","Input","type","id","onChange","md","overflow","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVA4FeA,qBAtFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,wqCACRC,QAAS,IAEXT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KANHA,4EASNa,GACXV,KAAKW,SAAS,CACZN,OAAQK,EAAME,OAAOC,MACrBP,QAASQ,IAAOJ,EAAME,OAAOC,qDAK/B,IAAIE,EAAW,IAAID,IAAOE,SAC1BD,EAASE,KAAO,SAASC,EAAMC,EAAOC,GAElC,OADWN,IAAOE,SAASK,UAAUJ,KAAKd,KAAKH,KAAMkB,EAAMC,EAAOC,GACtDE,QAAQ,KAAK,wBAE7BR,IAAOS,WACL,CAAEC,UAAU,EAAMT,SAAUA,EAAUU,QAAQ,EAAMC,QAAQ,EAAMC,KAAK,IAGzE,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAM,kEACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,GAE1B5B,KAAKW,SAAS,CACZL,QAASQ,IAAOd,KAAKI,MAAMC,2CAK7B,OACE8B,EAAAC,EAAAN,cAAA,OAAKO,UAAU,OACbF,EAAAC,EAAAN,cAACQ,EAAA,EAAD,CAAKC,MAAO,CAACC,WAAY,EAAGC,YAAa,EAAGC,WAAY,SACtDP,EAAAC,EAAAN,cAACa,EAAA,EAAD,CAAKC,EAAE,KACLT,EAAAC,EAAAN,cAACe,EAAA,EAAD,CAAMN,MAAO,CAACO,OAAQ,SACpBX,EAAAC,EAAAN,cAACiB,EAAA,EAAD,iBACAZ,EAAAC,EAAAN,cAACkB,EAAA,EAAD,KACEb,EAAAC,EAAAN,cAACmB,EAAA,EAAD,CACEC,KAAK,WACLC,GAAG,SACHtC,MAAOb,KAAKI,MAAMC,OAClBkC,MAAO,CAACO,OAAQ,QAChBM,SAAUpD,KAAKO,kBAMvB4B,EAAAC,EAAAN,cAACa,EAAA,EAAD,CAAKU,GAAG,KACNlB,EAAAC,EAAAN,cAACe,EAAA,EAAD,CAAMN,MAAO,CAACO,OAAQ,SACpBX,EAAAC,EAAAN,cAACiB,EAAA,EAAD,gBACAZ,EAAAC,EAAAN,cAACkB,EAAA,EAAD,KACEb,EAAAC,EAAAN,cAACe,EAAA,EAAD,CACEN,MAAO,CAACO,OAAQ,OAAQQ,SAAU,WAEpCnB,EAAAC,EAAAN,cAAA,OACEqB,GAAG,UACHd,UAAY,eACZkB,wBAAyB,CAACC,OAAQxD,KAAKI,MAAME,wBAlE7CmD,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7B,EAAAC,EAAAN,cAACmC,EAAD,MAASpC,SAASqC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72ca3426.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardBody, Input } from 'reactstrap';\nimport marked from 'marked';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editor: \"# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n\\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '```' && lastLine == '```') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n\\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere's also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbererd lists too.\\n1. Use just 1s if you want! \\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let's not forget embedded images:\\n\\n![React Logo w/ Text](https://goo.gl/Umyytc)\",\n      preview: \"\",\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      editor: event.target.value,\n      preview: marked(event.target.value),\n    })\n  }\n\n  componentDidMount () {\n    var renderer = new marked.Renderer();\n    renderer.link = function(href, title, text) {\n        var link = marked.Renderer.prototype.link.call(this, href, title, text);\n        return link.replace(\"<a\",\"<a target='_blank' \");\n    };\n    marked.setOptions(\n      { sanitize: true, renderer: renderer, tables: true, breaks: true, gfm: true }\n    )\n\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    script.async = true;\n    document.body.appendChild(script);\n\n    this.setState({\n      preview: marked(this.state.editor),\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row style={{marginLeft: 0, marginRight: 0, paddingTop: \"10px\"}}>\n          <Col m=\"6\">\n            <Card style={{height: \"95vh\"}}>\n              <CardHeader>Markdown</CardHeader>\n              <CardBody>\n                <Input\n                  type=\"textarea\"\n                  id=\"editor\"\n                  value={this.state.editor}\n                  style={{height: \"100%\"}}\n                  onChange={this.handleChange}\n                >\n                </Input>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\">\n            <Card style={{height: \"95vh\"}}>\n              <CardHeader>Preview</CardHeader>\n              <CardBody>\n                <Card\n                  style={{height: \"100%\", overflow: \"hidden\"}}\n                >\n                <div\n                  id=\"preview\"\n                  className = \"previewStyle\"\n                  dangerouslySetInnerHTML={{__html: this.state.preview}}\n                >\n                </div>\n                </Card>\n                {/* <Input\n                  type=\"textarea\"\n                  id=\"preview\"\n                  value={this.state.preview}\n                  style={{height: \"100%\", background: \"white\"}}\n                  readOnly\n                >\n                </Input> */}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}